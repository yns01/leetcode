from typing import List
from collections import deque


class Solution:
    def removeInvalidParentheses(self, s: str):
        if not s:
            return ['']

        # seen = set()
        que = deque()
        que.append((s, 0))
        res = []
        while que:
            ss, remove_from = que.popleft()

            if self.isValid(ss):
                res.append(ss)

            if res:
                continue

            #  "(()(()", removing 0th then 3rd or removing 3rd then 0th both generates "()()".
            # To avoid duplicates, we start removing only from the last removed position
            # (()(() will generate '()(()' - removed 0th  and '(()()' removed 3rd
            # If for the second string, we start removing at the 0th, we will generate ()()
            # However, this string has already generated by the first string when removing the 2nd.
            for i in range(remove_from, len(ss)):
                if ss[i] != '(' and ss[i] != ')':
                    continue

                # move i forward as long as the current element
                # is the same as the previous
                # Unless, of course, we're at the first iteration.
                if (i == remove_from or ss[i] != ss[i-1]):
                    new_str = ss[:i] + ss[i+1:]
                # if new_str in seen:
                #     continue
                # seen.add(new_str)
                    que.append((new_str, i))

        return res

    def isValid(self, s: str):
        count = 0
        for b in s:
            if b == '(':
                count += 1
            elif b == ')':
                count -= 1
                if count < 0:
                    return False

        return not count


print(Solution().removeInvalidParentheses('(()(()'))
